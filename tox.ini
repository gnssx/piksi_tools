[tox]
envlist = py27

[testenv]
deps = -r{toxinidir}/requirements.txt
whitelist_externals = py.test
commands = py.test -v tests/
sitepackages = False
usedevelop = True

[testenv:flake8]
deps = flake8
       -rrequirements.txt
whitelist_externals = flake8
commands = flake8 piksi_tools

[flake8]
# W504: ignore one of either 503 or 504
# W605: Deprecation warning - will be relevant in python 3.7+
extend-ignore = W504,W605

[testenv:pyinstaller-linux]
basepython = python2.7
# since we want _version.py to be generated
usedevelop = True
deps =
install_command = bash {toxinidir}/tasks/pip-install.sh {opts} {packages}
whitelist_externals = pip python bash
commands =
        pip install -r requirements.txt
        pip install pyinstaller==3.2.1 pyside==1.2.4
        # hack since enable is not packaged correctly
        pip install numpy
        pip install -r requirements_gui.txt
        # since older pyserial has issues on ubuntu 16.04
        pip install pyserial==3.4
        python -m PyInstaller -y misc/console.spec

[testenv:pyinstaller-win]
basepython = python2.7
# since we want _version.py to be generated
usedevelop = True
deps =
install_command = powershell {toxinidir}/tasks/pip-install.ps1 {opts} {packages}
whitelist_externals = pip python powershell
commands =
        pip install -r requirements.txt
        pip install pyinstaller==3.2.1 pyside==1.2.4
        # hack since enable is not packaged correctly
        pip install -r requirements_gui.txt
        python -m PyInstaller -y misc/console.spec

[testenv:pyinstaller-macos]
basepython = python2.7
# since we want _version.py to be generated
usedevelop = True
deps =
install_command = bash {toxinidir}/tasks/pip-install.sh {opts} {packages}
whitelist_externals = pip python bash
commands =
        pip install -r requirements.txt
        pip install pyinstaller==3.2.1 pyside==1.2.4
        python misc/hacks/pyside_postinstall.py -install
        # hack since enable is not packaged correctly
        pip install -r requirements_gui.txt
        python -m PyInstaller -y misc/console.spec

[testenv:pyinstaller_cmdline_tools-nix]
basepython = python2.7
# since we want _version.py to be generated
usedevelop = True
deps =
install_command = bash {toxinidir}/tasks/pip-install.sh {opts} {packages}
whitelist_externals = python bash pip
commands =
        pip install -r requirements.txt
        pip install pyinstaller==3.2.1
        python -m PyInstaller --onefile --distpath ./dist/cmd_line piksi_tools/serial_link.py
        python -m PyInstaller --onefile --distpath ./dist/cmd_line piksi_tools/settings.py
        python -m PyInstaller --onefile --distpath ./dist/cmd_line piksi_tools/fileio.py
        python -m PyInstaller --onefile --distpath ./dist/cmd_line piksi_tools/bootload_v3.py
        python -m PyInstaller --onefile --distpath ./dist/cmd_line piksi_tools/interpolate_event_positions.py

[testenv:pyinstaller_cmdline_tools-win]
basepython = python2.7
# since we want _version.py to be generated
usedevelop = True
deps =
install_command = powershell {toxinidir}/tasks/pip-install.ps1 {opts} {packages}
whitelist_externals = python powershell pip
commands =
        pip install -r requirements.txt
        pip install pyinstaller==3.2.1
        python -m PyInstaller --onefile --distpath ./dist/cmd_line piksi_tools/serial_link.py
        python -m PyInstaller --onefile --distpath ./dist/cmd_line piksi_tools/settings.py
        python -m PyInstaller --onefile --distpath ./dist/cmd_line piksi_tools/fileio.py
        python -m PyInstaller --onefile --distpath ./dist/cmd_line piksi_tools/bootload_v3.py
        python -m PyInstaller --onefile --distpath ./dist/cmd_line piksi_tools/interpolate_event_positions.py
